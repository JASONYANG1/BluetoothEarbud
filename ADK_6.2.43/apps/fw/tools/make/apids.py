#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2016 Qualcomm Technologies International, Ltd.
#   Part of 6.2

#
# Generated Fri May 27 15:03:43 2016 by generateDS.py version 2.14a.
#
# Command line options:
#   ('-o', 'apids.py')
#
# Command line arguments:
#   api.xsd
#
# Command line:
#   C:\Users\smunday\Downloads\generateDS-2.14a\generateDS.py -o "apids.py" api.xsd
#
# Current working directory (os.getcwd()):
#   trap_api
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_


Validate_simpletypes_ = True


etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        try:
            prefix, name = attr_parts
            namespace = node.nsmap.get(prefix)
            if namespace is not None:
                value = attrs.get('{%s}%s' % (namespace, name, ))
        except AttributeError:
            pass
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class api_version(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, major=None, minor=None):
        self.original_tagname_ = None
        self.major = major
        self.minor = minor
    def factory(*args_, **kwargs_):
        if api_version.subclass:
            return api_version.subclass(*args_, **kwargs_)
        else:
            return api_version(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_major(self): return self.major
    def set_major(self, major): self.major = major
    def get_minor(self): return self.minor
    def set_minor(self, minor): self.minor = minor
    def hasContent_(self):
        if (
            self.major is not None or
            self.minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='api_version', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='api_version')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='api_version', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='api_version'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='api_version', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.major is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smajor>%s</%smajor>%s' % (namespace_, self.gds_format_float(self.major, input_name='major'), namespace_, eol_))
        if self.minor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sminor>%s</%sminor>%s' % (namespace_, self.gds_format_float(self.minor, input_name='minor'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='api_version'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.major is not None:
            showIndent(outfile, level)
            outfile.write('major=%f,\n' % self.major)
        if self.minor is not None:
            showIndent(outfile, level)
            outfile.write('minor=%f,\n' % self.minor)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'major':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'major')
            self.major = fval_
        elif nodeName_ == 'minor':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'minor')
            self.minor = fval_
# end class api_version


class api(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, traps=None, trapsets=None, messages=None, headers=None):
        self.original_tagname_ = None
        self.version = version
        self.traps = traps
        self.trapsets = trapsets
        self.messages = messages
        self.headers = headers
    def factory(*args_, **kwargs_):
        if api.subclass:
            return api.subclass(*args_, **kwargs_)
        else:
            return api(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_traps(self): return self.traps
    def set_traps(self, traps): self.traps = traps
    def get_trapsets(self): return self.trapsets
    def set_trapsets(self, trapsets): self.trapsets = trapsets
    def get_messages(self): return self.messages
    def set_messages(self, messages): self.messages = messages
    def get_headers(self): return self.headers
    def set_headers(self, headers): self.headers = headers
    def hasContent_(self):
        if (
            self.version is not None or
            self.traps is not None or
            self.trapsets is not None or
            self.messages is not None or
            self.headers is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='api', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='api')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='api', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='api'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='api', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.version is not None:
            self.version.export(outfile, level, namespace_, name_='version', pretty_print=pretty_print)
        if self.traps is not None:
            self.traps.export(outfile, level, namespace_, name_='traps', pretty_print=pretty_print)
        if self.trapsets is not None:
            self.trapsets.export(outfile, level, namespace_, name_='trapsets', pretty_print=pretty_print)
        if self.messages is not None:
            self.messages.export(outfile, level, namespace_, name_='messages', pretty_print=pretty_print)
        if self.headers is not None:
            self.headers.export(outfile, level, namespace_, name_='headers', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='api'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version=model_.api_version(\n')
            self.version.exportLiteral(outfile, level, name_='version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.traps is not None:
            showIndent(outfile, level)
            outfile.write('traps=model_.traps(\n')
            self.traps.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.trapsets is not None:
            showIndent(outfile, level)
            outfile.write('trapsets=model_.trapsets(\n')
            self.trapsets.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.messages is not None:
            showIndent(outfile, level)
            outfile.write('messages=model_.messages(\n')
            self.messages.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.headers is not None:
            showIndent(outfile, level)
            outfile.write('headers=model_.headers(\n')
            self.headers.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'version':
            obj_ = api_version.factory()
            obj_.build(child_)
            self.version = obj_
            obj_.original_tagname_ = 'version'
        elif nodeName_ == 'traps':
            obj_ = traps.factory()
            obj_.build(child_)
            self.traps = obj_
            obj_.original_tagname_ = 'traps'
        elif nodeName_ == 'trapsets':
            obj_ = trapsets.factory()
            obj_.build(child_)
            self.trapsets = obj_
            obj_.original_tagname_ = 'trapsets'
        elif nodeName_ == 'messages':
            obj_ = messages.factory()
            obj_.build(child_)
            self.messages = obj_
            obj_.original_tagname_ = 'messages'
        elif nodeName_ == 'headers':
            obj_ = headers.factory()
            obj_.build(child_)
            self.headers = obj_
            obj_.original_tagname_ = 'headers'
# end class api


class traps(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, trap=None):
        self.original_tagname_ = None
        self.version = _cast(None, version)
        if trap is None:
            self.trap = []
        else:
            self.trap = trap
    def factory(*args_, **kwargs_):
        if traps.subclass:
            return traps.subclass(*args_, **kwargs_)
        else:
            return traps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_trap(self): return self.trap
    def set_trap(self, trap): self.trap = trap
    def add_trap(self, value): self.trap.append(value)
    def insert_trap_at(self, index, value): self.trap.insert(index, value)
    def replace_trap_at(self, index, value): self.trap[index] = value
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def hasContent_(self):
        if (
            self.trap
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='traps', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='traps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='traps', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='traps'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='traps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for trap_ in self.trap:
            trap_.export(outfile, level, namespace_, name_='trap', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='traps'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('trap=[\n')
        level += 1
        for trap_ in self.trap:
            showIndent(outfile, level)
            outfile.write('model_.trap(\n')
            trap_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'trap':
            obj_ = trap.factory()
            obj_.build(child_)
            self.trap.append(obj_)
            obj_.original_tagname_ = 'trap'
# end class traps


class trapsets(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, trapset=None):
        self.original_tagname_ = None
        if trapset is None:
            self.trapset = []
        else:
            self.trapset = trapset
    def factory(*args_, **kwargs_):
        if trapsets.subclass:
            return trapsets.subclass(*args_, **kwargs_)
        else:
            return trapsets(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_trapset(self): return self.trapset
    def set_trapset(self, trapset): self.trapset = trapset
    def add_trapset(self, value): self.trapset.append(value)
    def insert_trapset_at(self, index, value): self.trapset.insert(index, value)
    def replace_trapset_at(self, index, value): self.trapset[index] = value
    def hasContent_(self):
        if (
            self.trapset
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='trapsets', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='trapsets')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='trapsets', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='trapsets'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='trapsets', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for trapset_ in self.trapset:
            trapset_.export(outfile, level, namespace_, name_='trapset', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='trapsets'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('trapset=[\n')
        level += 1
        for trapset_ in self.trapset:
            showIndent(outfile, level)
            outfile.write('model_.trapset(\n')
            trapset_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'trapset':
            obj_ = trapset.factory()
            obj_.build(child_)
            self.trapset.append(obj_)
            obj_.original_tagname_ = 'trapset'
# end class trapsets


class messages(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, base=None, message=None):
        self.original_tagname_ = None
        self.base = _cast(None, base)
        if message is None:
            self.message = []
        else:
            self.message = message
    def factory(*args_, **kwargs_):
        if messages.subclass:
            return messages.subclass(*args_, **kwargs_)
        else:
            return messages(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_message(self): return self.message
    def set_message(self, message): self.message = message
    def add_message(self, value): self.message.append(value)
    def insert_message_at(self, index, value): self.message.insert(index, value)
    def replace_message_at(self, index, value): self.message[index] = value
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def hasContent_(self):
        if (
            self.message
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='messages', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='messages')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='messages', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='messages'):
        if self.base is not None and 'base' not in already_processed:
            already_processed.add('base')
            outfile.write(' base=%s' % (self.gds_format_string(quote_attrib(self.base).encode(ExternalEncoding), input_name='base'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='messages', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for message_ in self.message:
            message_.export(outfile, level, namespace_, name_='message', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='messages'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.base is not None and 'base' not in already_processed:
            already_processed.add('base')
            showIndent(outfile, level)
            outfile.write('base="%s",\n' % (self.base,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('message=[\n')
        level += 1
        for message_ in self.message:
            showIndent(outfile, level)
            outfile.write('model_.message(\n')
            message_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('base', node)
        if value is not None and 'base' not in already_processed:
            already_processed.add('base')
            self.base = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'message':
            obj_ = message.factory()
            obj_.build(child_)
            self.message.append(obj_)
            obj_.original_tagname_ = 'message'
# end class messages


class headers(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None):
        self.original_tagname_ = None
        if header is None:
            self.header = []
        else:
            self.header = header
    def factory(*args_, **kwargs_):
        if headers.subclass:
            return headers.subclass(*args_, **kwargs_)
        else:
            return headers(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def add_header(self, value): self.header.append(value)
    def insert_header_at(self, index, value): self.header.insert(index, value)
    def replace_header_at(self, index, value): self.header[index] = value
    def hasContent_(self):
        if (
            self.header
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='headers', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='headers')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='headers', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='headers'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='headers', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for header_ in self.header:
            header_.export(outfile, level, namespace_, name_='header', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='headers'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('header=[\n')
        level += 1
        for header_ in self.header:
            showIndent(outfile, level)
            outfile.write('model_.header(\n')
            header_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header':
            obj_ = header.factory()
            obj_.build(child_)
            self.header.append(obj_)
            obj_.original_tagname_ = 'header'
# end class headers


class trapset(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, index=None, name=None, builddefs=None, document=None):
        self.original_tagname_ = None
        self.index = _cast(int, index)
        self.name = _cast(None, name)
        self.builddefs = _cast(None, builddefs)
        self.document = document
    def factory(*args_, **kwargs_):
        if trapset.subclass:
            return trapset.subclass(*args_, **kwargs_)
        else:
            return trapset(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_document(self): return self.document
    def set_document(self, document): self.document = document
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_builddefs(self): return self.builddefs
    def set_builddefs(self, builddefs): self.builddefs = builddefs
    def hasContent_(self):
        if (
            self.document is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='trapset', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='trapset')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='trapset', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='trapset'):
        if self.index is not None and 'index' not in already_processed:
            already_processed.add('index')
            outfile.write(' index="%s"' % self.gds_format_integer(self.index, input_name='index'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.builddefs is not None and 'builddefs' not in already_processed:
            already_processed.add('builddefs')
            outfile.write(' builddefs=%s' % (self.gds_format_string(quote_attrib(self.builddefs).encode(ExternalEncoding), input_name='builddefs'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='trapset', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.document is not None:
            self.document.export(outfile, level, namespace_, name_='document', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='trapset'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.index is not None and 'index' not in already_processed:
            already_processed.add('index')
            showIndent(outfile, level)
            outfile.write('index=%d,\n' % (self.index,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.builddefs is not None and 'builddefs' not in already_processed:
            already_processed.add('builddefs')
            showIndent(outfile, level)
            outfile.write('builddefs="%s",\n' % (self.builddefs,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.document is not None:
            showIndent(outfile, level)
            outfile.write('document=model_.document(\n')
            self.document.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.add('index')
            try:
                self.index = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('builddefs', node)
        if value is not None and 'builddefs' not in already_processed:
            already_processed.add('builddefs')
            self.builddefs = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'document':
            obj_ = document.factory()
            obj_.build(child_)
            self.document = obj_
            obj_.original_tagname_ = 'document'
# end class trapset


class header(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, extra_header=None, preamble=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        if extra_header is None:
            self.extra_header = []
        else:
            self.extra_header = extra_header
        self.preamble = preamble
    def factory(*args_, **kwargs_):
        if header.subclass:
            return header.subclass(*args_, **kwargs_)
        else:
            return header(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extra_header(self): return self.extra_header
    def set_extra_header(self, extra_header): self.extra_header = extra_header
    def add_extra_header(self, value): self.extra_header.append(value)
    def insert_extra_header_at(self, index, value): self.extra_header.insert(index, value)
    def replace_extra_header_at(self, index, value): self.extra_header[index] = value
    def get_preamble(self): return self.preamble
    def set_preamble(self, preamble): self.preamble = preamble
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            self.extra_header or
            self.preamble is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='header', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='header')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='header', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='header'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='header', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for extra_header_ in self.extra_header:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sextra_header>%s</%sextra_header>%s' % (namespace_, self.gds_format_string(quote_xml(extra_header_).encode(ExternalEncoding), input_name='extra_header'), namespace_, eol_))
        if self.preamble is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spreamble>%s</%spreamble>%s' % (namespace_, self.gds_format_string(quote_xml(self.preamble).encode(ExternalEncoding), input_name='preamble'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='header'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('extra_header=[\n')
        level += 1
        for extra_header_ in self.extra_header:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(extra_header_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.preamble is not None:
            showIndent(outfile, level)
            outfile.write('preamble=%s,\n' % quote_python(self.preamble).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'extra_header':
            extra_header_ = child_.text
            extra_header_ = self.gds_validate_string(extra_header_, node, 'extra_header')
            self.extra_header.append(extra_header_)
        elif nodeName_ == 'preamble':
            preamble_ = child_.text
            preamble_ = self.gds_validate_string(preamble_, node, 'preamble')
            self.preamble = preamble_
# end class header


class trap(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, autogen=None, lifestage=None, fast=False, blocking=None, header=None, tmi=None, trapset=None, processor=None, return_=None, params=None, document=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.autogen = _cast(None, autogen)
        self.lifestage = _cast(None, lifestage)
        self.fast = _cast(bool, fast)
        self.blocking = _cast(bool, blocking)
        self.header = _cast(None, header)
        self.tmi = _cast(int, tmi)
        self.trapset = _cast(None, trapset)
        self.processor = _cast(None, processor)
        self.return_ = return_
        self.params = params
        self.document = document
    def factory(*args_, **kwargs_):
        if trap.subclass:
            return trap.subclass(*args_, **kwargs_)
        else:
            return trap(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_return(self): return self.return_
    def set_return(self, return_): self.return_ = return_
    def get_params(self): return self.params
    def set_params(self, params): self.params = params
    def get_document(self): return self.document
    def set_document(self, document): self.document = document
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_autogen(self): return self.autogen
    def set_autogen(self, autogen): self.autogen = autogen
    def get_lifestage(self): return self.lifestage
    def set_lifestage(self, lifestage): self.lifestage = lifestage
    def get_fast(self): return self.fast
    def set_fast(self, fast): self.fast = fast
    def get_blocking(self): return self.blocking
    def set_blocking(self, blocking): self.blocking = blocking
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_tmi(self): return self.tmi
    def set_tmi(self, tmi): self.tmi = tmi
    def get_trapset(self): return self.trapset
    def set_trapset(self, trapset): self.trapset = trapset
    def get_processor(self): return self.processor
    def set_processor(self, processor): self.processor = processor
    def hasContent_(self):
        if (
            self.return_ is not None or
            self.params is not None or
            self.document is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='trap', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='trap')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='trap', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='trap'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.autogen is not None and 'autogen' not in already_processed:
            already_processed.add('autogen')
            outfile.write(' autogen=%s' % (self.gds_format_string(quote_attrib(self.autogen).encode(ExternalEncoding), input_name='autogen'), ))
        if self.lifestage is not None and 'lifestage' not in already_processed:
            already_processed.add('lifestage')
            outfile.write(' lifestage=%s' % (self.gds_format_string(quote_attrib(self.lifestage).encode(ExternalEncoding), input_name='lifestage'), ))
        if self.fast is not None and 'fast' not in already_processed:
            already_processed.add('fast')
            outfile.write(' fast="%s"' % self.gds_format_boolean(self.fast, input_name='fast'))
        if self.blocking is not None and 'blocking' not in already_processed:
            already_processed.add('blocking')
            outfile.write(' blocking="%s"' % self.gds_format_boolean(self.blocking, input_name='blocking'))
        if self.header is not None and 'header' not in already_processed:
            already_processed.add('header')
            outfile.write(' header=%s' % (self.gds_format_string(quote_attrib(self.header).encode(ExternalEncoding), input_name='header'), ))
        if self.tmi is not None and 'tmi' not in already_processed:
            already_processed.add('tmi')
            outfile.write(' tmi="%s"' % self.gds_format_integer(self.tmi, input_name='tmi'))
        if self.trapset is not None and 'trapset' not in already_processed:
            already_processed.add('trapset')
            outfile.write(' trapset=%s' % (self.gds_format_string(quote_attrib(self.trapset).encode(ExternalEncoding), input_name='trapset'), ))
        if self.processor is not None and 'processor' not in already_processed:
            already_processed.add('processor')
            outfile.write(' processor=%s' % (self.gds_format_string(quote_attrib(self.processor).encode(ExternalEncoding), input_name='processor'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='trap', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            self.return_.export(outfile, level, namespace_, name_='return', pretty_print=pretty_print)
        if self.params is not None:
            self.params.export(outfile, level, namespace_, name_='params', pretty_print=pretty_print)
        if self.document is not None:
            self.document.export(outfile, level, namespace_, name_='document', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='trap'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.autogen is not None and 'autogen' not in already_processed:
            already_processed.add('autogen')
            showIndent(outfile, level)
            outfile.write('autogen="%s",\n' % (self.autogen,))
        if self.lifestage is not None and 'lifestage' not in already_processed:
            already_processed.add('lifestage')
            showIndent(outfile, level)
            outfile.write('lifestage="%s",\n' % (self.lifestage,))
        if self.fast is not None and 'fast' not in already_processed:
            already_processed.add('fast')
            showIndent(outfile, level)
            outfile.write('fast=%s,\n' % (self.fast,))
        if self.blocking is not None and 'blocking' not in already_processed:
            already_processed.add('blocking')
            showIndent(outfile, level)
            outfile.write('blocking=%s,\n' % (self.blocking,))
        if self.header is not None and 'header' not in already_processed:
            already_processed.add('header')
            showIndent(outfile, level)
            outfile.write('header="%s",\n' % (self.header,))
        if self.tmi is not None and 'tmi' not in already_processed:
            already_processed.add('tmi')
            showIndent(outfile, level)
            outfile.write('tmi=%d,\n' % (self.tmi,))
        if self.trapset is not None and 'trapset' not in already_processed:
            already_processed.add('trapset')
            showIndent(outfile, level)
            outfile.write('trapset="%s",\n' % (self.trapset,))
        if self.processor is not None and 'processor' not in already_processed:
            already_processed.add('processor')
            showIndent(outfile, level)
            outfile.write('processor="%s",\n' % (self.processor,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.return_ is not None:
            showIndent(outfile, level)
            outfile.write('return_=model_.return_(\n')
            self.return_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.params is not None:
            showIndent(outfile, level)
            outfile.write('params=model_.params(\n')
            self.params.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.document is not None:
            showIndent(outfile, level)
            outfile.write('document=model_.document(\n')
            self.document.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('autogen', node)
        if value is not None and 'autogen' not in already_processed:
            already_processed.add('autogen')
            self.autogen = value
        value = find_attr_value_('lifestage', node)
        if value is not None and 'lifestage' not in already_processed:
            already_processed.add('lifestage')
            self.lifestage = value
        value = find_attr_value_('fast', node)
        if value is not None and 'fast' not in already_processed:
            already_processed.add('fast')
            if value in ('true', '1'):
                self.fast = True
            elif value in ('false', '0'):
                self.fast = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('blocking', node)
        if value is not None and 'blocking' not in already_processed:
            already_processed.add('blocking')
            if value in ('true', '1'):
                self.blocking = True
            elif value in ('false', '0'):
                self.blocking = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('header', node)
        if value is not None and 'header' not in already_processed:
            already_processed.add('header')
            self.header = value
        value = find_attr_value_('tmi', node)
        if value is not None and 'tmi' not in already_processed:
            already_processed.add('tmi')
            try:
                self.tmi = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('trapset', node)
        if value is not None and 'trapset' not in already_processed:
            already_processed.add('trapset')
            self.trapset = value
        value = find_attr_value_('processor', node)
        if value is not None and 'processor' not in already_processed:
            already_processed.add('processor')
            self.processor = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'return':
            obj_ = return_.factory()
            obj_.build(child_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
        elif nodeName_ == 'params':
            obj_ = params.factory()
            obj_.build(child_)
            self.params = obj_
            obj_.original_tagname_ = 'params'
        elif nodeName_ == 'document':
            obj_ = document.factory()
            obj_.build(child_)
            self.document = obj_
            obj_.original_tagname_ = 'document'
# end class trap


class message(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, msgidx=None, name=None, params=None, document=None):
        self.original_tagname_ = None
        self.msgidx = _cast(None, msgidx)
        self.name = _cast(None, name)
        self.params = params
        self.document = document
    def factory(*args_, **kwargs_):
        if message.subclass:
            return message.subclass(*args_, **kwargs_)
        else:
            return message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_params(self): return self.params
    def set_params(self, params): self.params = params
    def get_document(self): return self.document
    def set_document(self, document): self.document = document
    def get_msgidx(self): return self.msgidx
    def set_msgidx(self, msgidx): self.msgidx = msgidx
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            self.params is not None or
            self.document is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='message', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='message')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='message', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='message'):
        if self.msgidx is not None and 'msgidx' not in already_processed:
            already_processed.add('msgidx')
            outfile.write(' msgidx=%s' % (self.gds_format_string(quote_attrib(self.msgidx).encode(ExternalEncoding), input_name='msgidx'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='message', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.params is not None:
            self.params.export(outfile, level, namespace_, name_='params', pretty_print=pretty_print)
        if self.document is not None:
            self.document.export(outfile, level, namespace_, name_='document', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='message'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.msgidx is not None and 'msgidx' not in already_processed:
            already_processed.add('msgidx')
            showIndent(outfile, level)
            outfile.write('msgidx="%s",\n' % (self.msgidx,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.params is not None:
            showIndent(outfile, level)
            outfile.write('params=model_.params(\n')
            self.params.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.document is not None:
            showIndent(outfile, level)
            outfile.write('document=model_.document(\n')
            self.document.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('msgidx', node)
        if value is not None and 'msgidx' not in already_processed:
            already_processed.add('msgidx')
            self.msgidx = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'params':
            obj_ = params.factory()
            obj_.build(child_)
            self.params = obj_
            obj_.original_tagname_ = 'params'
        elif nodeName_ == 'document':
            obj_ = document.factory()
            obj_.build(child_)
            self.document = obj_
            obj_.original_tagname_ = 'document'
# end class message


class return_(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, document=None, extensiontype_=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.document = document
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if return_.subclass:
            return return_.subclass(*args_, **kwargs_)
        else:
            return return_(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_document(self): return self.document
    def set_document(self, document): self.document = document
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.document is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='return', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='return')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='return', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='return'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='return', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.document is not None:
            self.document.export(outfile, level, namespace_, name_='document', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='return'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.document is not None:
            showIndent(outfile, level)
            outfile.write('document=model_.document(\n')
            self.document.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'document':
            obj_ = document.factory()
            obj_.build(child_)
            self.document = obj_
            obj_.original_tagname_ = 'document'
# end class return_


class params(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, param=None):
        self.original_tagname_ = None
        if param is None:
            self.param = []
        else:
            self.param = param
    def factory(*args_, **kwargs_):
        if params.subclass:
            return params.subclass(*args_, **kwargs_)
        else:
            return params(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_param(self): return self.param
    def set_param(self, param): self.param = param
    def add_param(self, value): self.param.append(value)
    def insert_param_at(self, index, value): self.param.insert(index, value)
    def replace_param_at(self, index, value): self.param[index] = value
    def hasContent_(self):
        if (
            self.param
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='params', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='params')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='params', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='params'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='params', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for param_ in self.param:
            param_.export(outfile, level, namespace_, name_='param', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='params'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('param=[\n')
        level += 1
        for param_ in self.param:
            showIndent(outfile, level)
            outfile.write('model_.param(\n')
            param_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'param':
            obj_ = param.factory()
            obj_.build(child_)
            self.param.append(obj_)
            obj_.original_tagname_ = 'param'
# end class params


class param(return_):
    subclass = None
    superclass = return_
    def __init__(self, type_=None, document=None, direction='IN', array=False, name=None):
        self.original_tagname_ = None
        super(param, self).__init__(type_, document, )
        self.direction = _cast(None, direction)
        self.array = _cast(bool, array)
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if param.subclass:
            return param.subclass(*args_, **kwargs_)
        else:
            return param(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def get_array(self): return self.array
    def set_array(self, array): self.array = array
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_param_direction(self, value):
        # Validate type param_direction, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            enumerations = ['IN', 'OUT', 'IN OUT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on param_direction' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            super(param, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='param', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='param')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='param', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='param'):
        super(param, self).exportAttributes(outfile, level, already_processed, namespace_, name_='param')
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.array is not None and 'array' not in already_processed:
            already_processed.add('array')
            outfile.write(' array="%s"' % self.gds_format_boolean(self.array, input_name='array'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='param', fromsubclass_=False, pretty_print=True):
        super(param, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='param'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            showIndent(outfile, level)
            outfile.write('direction="%s",\n' % (self.direction,))
        if self.array is not None and 'array' not in already_processed:
            already_processed.add('array')
            showIndent(outfile, level)
            outfile.write('array=%s,\n' % (self.array,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        super(param, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(param, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            self.direction = value
            self.validate_param_direction(self.direction)    # validate type param_direction
        value = find_attr_value_('array', node)
        if value is not None and 'array' not in already_processed:
            already_processed.add('array')
            if value in ('true', '1'):
                self.array = True
            elif value in ('false', '0'):
                self.array = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        super(param, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(param, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class param


class keypair(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valuetype=None, document=None):
        self.original_tagname_ = None
        self.valuetype = _cast(None, valuetype)
        self.document = document
    def factory(*args_, **kwargs_):
        if keypair.subclass:
            return keypair.subclass(*args_, **kwargs_)
        else:
            return keypair(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_document(self): return self.document
    def set_document(self, document): self.document = document
    def get_valuetype(self): return self.valuetype
    def set_valuetype(self, valuetype): self.valuetype = valuetype
    def hasContent_(self):
        if (
            self.document is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='keypair', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='keypair')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='keypair', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='keypair'):
        if self.valuetype is not None and 'valuetype' not in already_processed:
            already_processed.add('valuetype')
            outfile.write(' valuetype=%s' % (self.gds_format_string(quote_attrib(self.valuetype).encode(ExternalEncoding), input_name='valuetype'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='keypair', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.document is not None:
            self.document.export(outfile, level, namespace_, name_='document', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='keypair'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.valuetype is not None and 'valuetype' not in already_processed:
            already_processed.add('valuetype')
            showIndent(outfile, level)
            outfile.write('valuetype="%s",\n' % (self.valuetype,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.document is not None:
            showIndent(outfile, level)
            outfile.write('document=model_.document(\n')
            self.document.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('valuetype', node)
        if value is not None and 'valuetype' not in already_processed:
            already_processed.add('valuetype')
            self.valuetype = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'document':
            obj_ = document.factory()
            obj_.build(child_)
            self.document = obj_
            obj_.original_tagname_ = 'document'
# end class keypair


class document(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, description=None, documentation=None, comment=None):
        self.original_tagname_ = None
        self.description = description
        self.documentation = documentation
        self.comment = comment
    def factory(*args_, **kwargs_):
        if document.subclass:
            return document.subclass(*args_, **kwargs_)
        else:
            return document(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_documentation(self): return self.documentation
    def set_documentation(self, documentation): self.documentation = documentation
    def get_comment(self): return self.comment
    def set_comment(self, comment): self.comment = comment
    def hasContent_(self):
        if (
            self.description is not None or
            self.documentation is not None or
            self.comment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='document', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='document')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='document', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='document'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='document', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_, eol_))
        if self.documentation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocumentation>%s</%sdocumentation>%s' % (namespace_, self.gds_format_string(quote_xml(self.documentation).encode(ExternalEncoding), input_name='documentation'), namespace_, eol_))
        if self.comment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomment>%s</%scomment>%s' % (namespace_, self.gds_format_string(quote_xml(self.comment).encode(ExternalEncoding), input_name='comment'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='document'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.documentation is not None:
            showIndent(outfile, level)
            outfile.write('documentation=%s,\n' % quote_python(self.documentation).encode(ExternalEncoding))
        if self.comment is not None:
            showIndent(outfile, level)
            outfile.write('comment=%s,\n' % quote_python(self.comment).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'documentation':
            documentation_ = child_.text
            documentation_ = self.gds_validate_string(documentation_, node, 'documentation')
            self.documentation = documentation_
        elif nodeName_ == 'comment':
            comment_ = child_.text
            comment_ = self.gds_validate_string(comment_, node, 'comment')
            self.comment = comment_
# end class document


GDSClassesMapping = {
    'version': api_version,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'api_version'
        rootClass = api_version
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'api_version'
        rootClass = api_version
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'api_version'
        rootClass = api_version
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'api_version'
        rootClass = api_version
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from apids import *\n\n')
        sys.stdout.write('import apids as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "api",
    "api_version",
    "document",
    "header",
    "headers",
    "keypair",
    "message",
    "messages",
    "param",
    "params",
    "return_",
    "trap",
    "traps",
    "trapset",
    "trapsets"
]
