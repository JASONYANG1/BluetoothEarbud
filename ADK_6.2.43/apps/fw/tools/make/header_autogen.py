# Copyright (c) 2016 Qualcomm Technologies International, Ltd.
#   Part of 6.2
'''
Script to autogenerate special headers during the Apps firmware build from a 
supplied list of special module headers containing magic macros. 
'''

import sys
import os
from optparse import OptionParser



if __name__ == "__main__":
    
    usage = "sched_autogen.py: -m MACRO -o OUTPUT <header list>"
    parser = OptionParser(usage=usage);
    parser.add_option("-o", "--output", help="Name of output file", 
                      type="string", dest="outfile")
    parser.add_option("-m", "--macro", help="Base name of macro to be "
                                            "generated, e.g. SCHED_TASK",
                      type="string", dest="macro")
    
    options, args = parser.parse_args()
    
    try:
        options.outfile
        options.macro
    except AttributeError:
        print usage
        sys.exit(1)
    
    #Open a file with the given name for writing
    try:
        with open(options.outfile, "wb") as out:
            
            # Write the include guard and a comment about where the file has
            # come from. 
            
            include_guard = \
                 "%s_H_" % os.path.splitext(
                                   os.path.basename(options.outfile).upper())[0]
            out.write("#ifndef %s\n" % include_guard)
            out.write("#define %s\n" % include_guard)
            out.write("/* Autogenerated scheduler task header created by "
                      "fw/tools/make/header_autogen.py */\n\n")
            
            # Include all the headers
            
            for header in args:
                out.write('''#include "%s"\n''' % header)
            out.write("\n")
               
            # Construct the macro definition
             
            out.write("#define %s_LIST(m)\\\n" % options.macro)
            
            for i, header in enumerate(args):
                # Construct the name of the macro from each header. Take the 
                # directory name, replace slashes with underscores and make 
                # uppercase. Then add the supplied macro name as a suffix
                hdr_dir = os.path.dirname(header)
                hdr_macro = "_".join(hdr_dir.split("/")).upper()
                hdr_macro = "%s_%s(m)" % (hdr_macro, options.macro)
                if i < len(args) - 1:
                    out.write(" %s \\\n" % hdr_macro)
                else:
                    out.write(" %s\n" % hdr_macro)
            out.write("\n")
            out.write("#endif /* %s */\n" % include_guard)
    except IOError:
        print "Failed to open '%s' for writing!" % options.outfile
        sys.exit(1)
        
    