#!/usr/bin/env python
# Copyright (c) 2016 Qualcomm Technologies International, Ltd.
#   Part of 6.2
#
# This tool creates an xuv image for programming into the flash memory
# device. It combines images for filesystems, and firmware into a
# single image according to the specification
# http://cognidox/vdocs/CS-333987-DD-E.pdf
#
import os
import sys
import struct

scriptdir = os.path.dirname(os.path.abspath(__file__))
pylibdir = os.path.join(scriptdir, "..", "pylib")
if not pylibdir in sys.path:
    sys.path.append(pylibdir)

from csr.dev.tools.flash_image_builder import ImageBuilder

if __name__ == "__main__":
    flash_config_python_file = sys.argv[1]
    if flash_config_python_file.endswith(".py"):
        execfile(flash_config_python_file)
        if len(sys.argv) > 3:
            select_bank_type = sys.argv[3]
        else:
            select_bank_type = "bank0"
        builder = ImageBuilder(flash0, select_bank=select_bank_type)
        builder.build()

        print "Boot Image - offset 0x%x, size 0x%x" % (
                    builder.boot_image["offset"], builder.boot_image["size"])

        print "Image output sections:"
        for section in builder.image:
            print "Flash offset 0x%08x size 0x%x" % (section[0], len(section[1]))
        print "Image Header:" 
        print builder.image_header
        
        if len(sys.argv) > 2:
            print "Writing '%s'" % sys.argv[2]
            builder.write_complete_flash_image_xuv(sys.argv[2])
            
    elif flash_config_python_file.endswith(".h"):
        # Create a header file with defines of values for use by the firmware
        builder = ImageBuilder(None)
        f = open(flash_config_python_file, "w")
        f.write("/** \\file\n");
        f.write(" * Definitions for parsing flash images\n")
        f.write(" * Autogenerated by %s\n" % sys.argv[0])
        f.write(" */\n")
        for magic_name,magic_value in builder.magic_numbers.iteritems():
            f.write("#define %s 0x%x\n" % (
                "_".join(["flash", magic_name]).upper(),
                struct.unpack(builder.pack_fmt, magic_value)[0]))
        for section_name,section_id in builder.section_ids.iteritems():
            for element_name,element_id in builder.element_ids.iteritems():
                if element_name is None:
                    f.write("#define %s 0x%x\n" % (
                        ("flash_section_" + section_name).upper(),
                        section_id))
                else:
                    f.write("#define %s 0x%x\n" % (
                        "_".join(["flash", section_name, element_name]).upper(),
                        section_id + element_id))
        for element_name,element_id in builder.element_ids.iteritems():
            if element_name:
                f.write("#define %s 0x%x\n" % (
                    ("flash_element_id_" + element_name).upper(),
                    element_id))
        f.close()
