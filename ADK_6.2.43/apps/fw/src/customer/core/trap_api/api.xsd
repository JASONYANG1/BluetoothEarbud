<?xml version="1.0" encoding="UTF-8"?>
<!-- XML schema to define application API protocol -->
<!-- Copyright (c) 2005 - 2016 Qualcomm Technologies International, Ltd. -->
<!--   %%version -->
<!-- $Id: //depot/.../api.xsd#1 $ -->
<xs:schema elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.1">

    <xs:complexType name="api_version">
      <xs:sequence>
        <xs:element name="major" type="xs:decimal"/>
        <xs:element name="minor" type="xs:decimal"/>
      </xs:sequence>
    </xs:complexType>
          
     <xs:element name="api">
        <xs:complexType>
              <xs:all>
                <xs:element name="version" type="api_version"/>
                <xs:element name="traps" type="traps"/>
                <xs:element name="trapsets" type="trapsets"/>
                <xs:element name="messages" type="messages"/>
                <xs:element name="headers" type="headers"/>
              </xs:all>
        </xs:complexType>
    </xs:element>



    <!-- <traps> -->

    <!-- This is container for an ordered list of <trap> 
         Attributes:
             version (required)
                The overall API version number
         -->
    <xs:complexType name="traps">
        <xs:sequence minOccurs="1" maxOccurs="256">
                <xs:element name="trap" type="trap"  />
        </xs:sequence>
        <xs:attribute name="version" use="required"/>
    </xs:complexType>

    <!-- <trapsets> -->

    <!-- This is container for an ordered list of <trapset> 
         Attributes:
         -->
    <xs:complexType name="trapsets">
        <xs:sequence minOccurs="1" maxOccurs="64">
                <xs:element name="trapset" type="trapset" />
        </xs:sequence>
    </xs:complexType>
    
    <!-- This is container for an ordered list of <message> 
         Attributes:
            base (required) 
                Base address of initial message. 
         -->
    <xs:complexType name="messages">
      <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element name="message" type="message" />
      </xs:sequence>
      <xs:attribute name="base" type="xs:string" use="required"/>
    </xs:complexType>
    
    <xs:complexType name="headers">
      <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element name="header" type="header" />
      </xs:sequence>
    </xs:complexType>
    <!-- <trapset> -->
    
    <!-- This defines a group of traps 
         Attributes:
             name (required)

             builddefs (optional)
                 Gives a conditional expression which determines if this trapset exists.
         -->
    <xs:complexType name="trapset">
            <xs:choice minOccurs="0" maxOccurs="1">
                <xs:element name="document" type="document"  maxOccurs="1"/>
            </xs:choice>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="builddefs" type="xs:string" use="optional"/>
            <xs:attribute name="index" type="xs:integer" use="required"/>
    </xs:complexType>

    <xs:complexType name="header">
        <xs:sequence>
            <xs:element name="extra_header" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="preamble" type="xs:string" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- <trap> -->
    
    <!-- This defines an individual trap 
         Attributes:
             name (required)
             trapset (required)
                 Links the trap the trapset which contains it
             header (optional)
                 Overrides the default header file to define this trap in.
             lifestage (optional)
                 Valid values "DEAD" and "FUTURE".
             processor (required)
                Indicates which processor is responsible for implementing 
                the trap.
             autogen (optional)
                Indicates for traps on processor "CSR" whether the build should
                autogenerate the implementation or not. Valid values are:
                "true" - Generate primitives and all glue code (unmarshall and
                marshall) for calls that are blocking on P0.
                "false" - Don't generate any primitives or glue code on P0. This
                is for calls that are implemented entirely on P1. 
                "p0_non_block" - Generate primitives and unmarshall glue code
                for the reception on P0 but not the marshalling code for
                the response. That allows the response to be sent at a later
                time.
             blocking (optional)
                Indicates for autogenerated traps whether the implementation 
                should create a blocking or non-blocking function call (i.e.
                one that waits for an IPC response or one that just sends a 
                message).  If not supplied, this decision is based on whether
                the function returns a value or not.
             fast (optional)
                Indicates that this trap executes quickly (typically a fast
                blocking p0 trap) and that it also needs to be quick to execute.
                Traps marked with this have high priority and so are useful for
                processing time critical events. This should be used sparingly,
                there should be a good reason for needing a trap to be marked as
                fast. Too many of these could to impact other time critical
                events like streaming audio.
         -->
    <xs:complexType name="trap">
            <xs:all minOccurs="0" maxOccurs="1">
                <xs:element name="return" type="return" minOccurs="1" maxOccurs="1"/>
                <xs:element name="params" type="params"  minOccurs="1" />
                <xs:element name="document" type="document"  maxOccurs="1"/>
            </xs:all>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="trapset" type="xs:string" use="required"/>
            <xs:attribute name="header" type="xs:string" use="optional"/>
            <xs:attribute name="lifestage" type="xs:string" use="optional"/>
            <xs:attribute name="processor" type="xs:string" use="required"/>
            <xs:attribute name="autogen" type="xs:string"/>
            <xs:attribute name="blocking" type="xs:boolean"/>
            <xs:attribute name="fast" type="xs:boolean" default="false" use="optional"/>
            <!-- trapset member index -->
            <xs:attribute name="tmi" type="xs:integer" use="required"/>
    </xs:complexType>    
    
    <!-- <message> -->
    
    <!-- This defines a group of traps 
         Attributes:
             name (required)
             
             mgsidx (required)
                String expression giving the message a unique message ID

         -->
    <xs:complexType name="message">
      <xs:all minOccurs="0" maxOccurs="1">
        <xs:element name="params" type="params"  minOccurs="0" />
        <xs:element name="document" type="document"/>
      </xs:all>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="msgidx" type="xs:string" use="required"/>
    </xs:complexType>
    
    <!-- <return> -->
    
    <!-- This defines the trap's return type 
    
    NOTE this is probably an existing type
         -->
    <xs:complexType name="return">
        <xs:all minOccurs="0" maxOccurs="1">
            <xs:element name="document" type="document"  maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="type" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- This is container for an ordered list of <param> 
         Can be empty. E.g function/message doesn't take any parameters.
         Attributes:
         -->
    <xs:complexType name="params">
      <xs:sequence >
        <xs:element name="param" type="param" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>  
    
    <!-- <param> -->
 
    <xs:simpleType name="param_direction">
      <xs:restriction base="xs:string">
        <xs:enumeration value="IN"/>
        <xs:enumeration value="OUT"/>
        <xs:enumeration value="IN OUT"/>
      </xs:restriction>
    </xs:simpleType>
 
    <!-- This defines the trap's calling parameters
      
        Attributes:
             name (required)        
             direction (required)
                Indicates if this is value being passed in, or a pointer
                to a value being returned. 
         -->
    <xs:complexType name="param">
        <xs:complexContent>
                <xs:extension base="return">
                    <xs:attribute name="name" type="xs:string" use="required"/>
                    <xs:attribute name="direction" type="param_direction" use="optional" default="IN"/>
                    <!-- Flags parameters with direction="OUT" which return an array 
                         rather than a single value -->
                    <xs:attribute name="array" type="xs:boolean" use="optional" default="false"/>
                </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- <keypair> -->
 
    <!-- This defines the trap's calling parameters

        Attributes:
         -->
    <xs:complexType name="keypair">
        <xs:all minOccurs="0" maxOccurs="1">
            <xs:element name="document" type="document"  maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="valuetype" type="xs:string" use="required"/>
    </xs:complexType>
    
    
    
    <!-- Define a generic documentation blob.-->

    <xs:complexType name="document">
        <xs:all>
            <!-- Gives a short description for general use.-->
            <xs:element name="description" type="xs:string"  minOccurs="1" maxOccurs="1"/>
            <!-- Gives a long description for public use.-->
            <xs:element name="documentation" type="xs:string"  minOccurs="1" maxOccurs="1"/>
            <!-- Gives a optional description for internal use.-->
            <xs:element name="comment" type="xs:string" minOccurs="1" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>
  
</xs:schema>

